"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.whenOr = exports.whenAnd = exports.when = exports.valueTags = exports.value = exports.undefined = exports.typeTags = exports.type = exports.tagsExhaustive = exports.tags = exports.tagStartsWith = exports.tag = exports.string = exports.record = exports.orElseAbsurd = exports.orElse = exports.option = exports.number = exports.null = exports.not = exports.nonEmptyString = exports.is = exports.instanceOfUnsafe = exports.instanceOf = exports.exhaustive = exports.either = exports.discriminatorsExhaustive = exports.discriminators = exports.discriminatorStartsWith = exports.discriminator = exports.defined = exports.date = exports.boolean = exports.bigint = exports.any = exports.MatcherTypeId = void 0;
var Predicate = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/data/Predicate"));
var internal = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/match/internal/matcher"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * @category type ids
 * @since 1.0.0
 */
const MatcherTypeId = internal.TypeId;
/**
 * @category constructors
 * @since 1.0.0
 */
exports.MatcherTypeId = MatcherTypeId;
const type = internal.type;
/**
 * @category constructors
 * @since 1.0.0
 */
exports.type = type;
const value = internal.value;
/**
 * @category constructors
 * @since 1.0.0
 */
exports.value = value;
const valueTags = internal.valueTags;
/**
 * @category constructors
 * @since 1.0.0
 */
exports.valueTags = valueTags;
const typeTags = internal.typeTags;
/**
 * @category combinators
 * @since 1.0.0
 */
exports.typeTags = typeTags;
const when = internal.when;
/**
 * @category combinators
 * @since 1.0.0
 */
exports.when = when;
const whenOr = internal.whenOr;
/**
 * @category combinators
 * @since 1.0.0
 */
exports.whenOr = whenOr;
const whenAnd = internal.whenAnd;
/**
 * @category combinators
 * @since 1.0.0
 */
exports.whenAnd = whenAnd;
const discriminator = internal.discriminator;
/**
 * @category combinators
 * @since 1.0.0
 */
exports.discriminator = discriminator;
const discriminatorStartsWith = internal.discriminatorStartsWith;
/**
 * @category combinators
 * @since 1.0.0
 */
exports.discriminatorStartsWith = discriminatorStartsWith;
const discriminators = internal.discriminators;
/**
 * @category combinators
 * @since 1.0.0
 */
exports.discriminators = discriminators;
const discriminatorsExhaustive = internal.discriminatorsExhaustive;
/**
 * @category combinators
 * @since 1.0.0
 */
exports.discriminatorsExhaustive = discriminatorsExhaustive;
const tag = internal.tag;
/**
 * @category combinators
 * @since 1.0.0
 */
exports.tag = tag;
const tagStartsWith = internal.tagStartsWith;
/**
 * @category combinators
 * @since 1.0.0
 */
exports.tagStartsWith = tagStartsWith;
const tags = internal.tags;
/**
 * @category combinators
 * @since 1.0.0
 */
exports.tags = tags;
const tagsExhaustive = internal.tagsExhaustive;
/**
 * @category combinators
 * @since 1.0.0
 */
exports.tagsExhaustive = tagsExhaustive;
const not = internal.not;
/**
 * @category predicates
 * @since 1.0.0
 */
exports.not = not;
const nonEmptyString = internal.nonEmptyString;
/**
 * @category predicates
 * @since 1.0.0
 */
exports.nonEmptyString = nonEmptyString;
const is = internal.is;
/**
 * @category predicates
 * @since 1.0.0
 */
exports.is = is;
const string = Predicate.isString;
/**
 * @category predicates
 * @since 1.0.0
 */
exports.string = string;
const number = Predicate.isNumber;
/**
 * @category predicates
 * @since 1.0.0
 */
exports.number = number;
const any = internal.any;
/**
 * @category predicates
 * @since 1.0.0
 */
exports.any = any;
const defined = internal.defined;
/**
 * @category predicates
 * @since 1.0.0
 */
exports.defined = defined;
const boolean = Predicate.isBoolean;
exports.boolean = boolean;
const _undefined = Predicate.isUndefined;
exports.undefined = _undefined;
const _null = Predicate.isNull;
exports.null = _null;
/**
 * @category predicates
 * @since 1.0.0
 */
const bigint = Predicate.isBigint;
/**
 * @category predicates
 * @since 1.0.0
 */
exports.bigint = bigint;
const date = Predicate.isDate;
/**
 * @category predicates
 * @since 1.0.0
 */
exports.date = date;
const record = Predicate.isRecord;
/**
 * @category predicates
 * @since 1.0.0
 */
exports.record = record;
const instanceOf = internal.instanceOf;
/**
 * @category predicates
 * @since 1.0.0
 */
exports.instanceOf = instanceOf;
const instanceOfUnsafe = internal.instanceOf;
/**
 * @category conversions
 * @since 1.0.0
 */
exports.instanceOfUnsafe = instanceOfUnsafe;
const orElse = internal.orElse;
/**
 * @category conversions
 * @since 1.0.0
 */
exports.orElse = orElse;
const orElseAbsurd = internal.orElseAbsurd;
/**
 * @category conversions
 * @since 1.0.0
 */
exports.orElseAbsurd = orElseAbsurd;
const either = internal.either;
/**
 * @category conversions
 * @since 1.0.0
 */
exports.either = either;
const option = internal.option;
/**
 * @category conversions
 * @since 1.0.0
 */
exports.option = option;
const exhaustive = internal.exhaustive;
exports.exhaustive = exhaustive;
//# sourceMappingURL=index.js.map